{
    "verManager": [],
    "startupPreloadFonts": true,
    "FONTS": [
        {
            "name": "Source_Han_Sans",
            "path": "asset/font/Source_Han_Sans.ttf",
            "fonttype": "ttf",
            "size": 0
        },
        {
            "name": "Source_Han_Serif",
            "path": "asset/font/Source_Han_Serif.otf",
            "fonttype": "otf",
            "size": 0
        }
    ],
    "EDITOR_MAG_FILTER": 9729,
    "IMAGE_LAYER_DP_COORD_JS": "function dpCoordToRealCoord(sp) {\n    if (!sp.useDPCoord || !sp._dpDirty)\n        return;\n    sp._dpDirty = false;\n    var cx = Config.WINDOW_WIDTH / 2;\n    var cy = Config.WINDOW_HEIGHT / 2;\n    var scaleMax = 20;\n    var normalDistance = 100;\n    var normalZ = normalDistance + sp._dpCameraZ;\n    var furthestDistance = normalDistance / scaleMax + normalDistance;\n    var furthestZ = furthestDistance + sp._dpCameraZ;\n    var dpX = sp.dpX + sp._dpCameraX;\n    var dpY = sp.dpY + sp._dpCameraY;\n    var dpZDistance = sp.dpZ - sp._dpCameraZ;\n    if (dpZDistance == normalDistance) {\n        toX = dpX;\n        toY = dpY;\n        if (sp.useDPCoordScaleMode) {\n            var toScaleX = 1;\n            var toScaleY = 1;\n        }\n        else {\n            toW = sp.dpWidth;\n            toH = sp.dpHeight;\n        }\n        sp.dpOpacity = 1;\n    }\n    else if (dpZDistance > normalDistance) {\n        if (dpZDistance >= furthestDistance) {\n            sp.dpOpacity = 0;\n            per = 1;\n            toX = cx;\n            toY = cy;\n            if (sp.useDPCoordScaleMode) {\n                toScaleX = 0.001;\n                toScaleY = 0.001;\n            }\n            else {\n                toW = 0;\n                toH = 0;\n            }\n        }\n        else {\n            sp.dpOpacity = 1;\n            var per = (dpZDistance - normalDistance) / (furthestDistance - normalDistance);\n            if (sp.useDPCoordScaleMode) {\n                var toX = (cx - dpX) * per + dpX;\n                var toY = (cy - dpY) * per + dpY;\n                toScaleX = 1 - per;\n                toScaleY = 1 - per;\n            }\n            else {\n                var toX = (cx - dpX) * per + dpX;\n                var toY = (cy - dpY) * per + dpY;\n                var toW = (0 - sp.dpWidth) * per + sp.dpWidth;\n                var toH = (0 - sp.dpHeight) * per + sp.dpHeight;\n            }\n        }\n    }\n    else if (dpZDistance < normalDistance && dpZDistance >= 0) {\n        var near = (normalDistance - dpZDistance) / normalDistance;\n        var per = near * scaleMax;\n        var sPer = per + 1;\n        if (sp.useDPCoordScaleMode) {\n            var toX = (dpX - cx) * per + dpX;\n            var toY = (dpY - cy) * per + dpY;\n            toScaleX = sPer;\n            toScaleY = sPer;\n        }\n        else {\n            var toX = (dpX - cx) * per + dpX;\n            var toY = (dpY - cy) * per + dpY;\n            var toW = sp.dpWidth * sPer;\n            var toH = sp.dpHeight * sPer;\n        }\n        if (near > 0.5) {\n            sp.dpOpacity = (1 - (near - 0.5) * 2);\n        }\n        else {\n            sp.dpOpacity = 1;\n        }\n    }\n    else {\n        sp.dpOpacity = 0;\n    }\n    sp.pos(toX, toY);\n    if (sp.useDPCoordScaleMode) {\n        sp.scaleX = toScaleX * sp.dpScaleX;\n        sp.scaleY = toScaleY * sp.dpScaleY;\n    }\n    else {\n        if (sp.width == 0 || sp.height == 0) {\n            sp.scaleX = 1;\n            sp.scaleY = 1;\n        }\n        else {\n            sp.scaleX = Math.max(toW / sp.width * sp.dpScaleX, 0.001);\n            sp.scaleY = Math.max(toH / sp.height * sp.dpScaleY, 0.001);\n        }\n    }\n}\nfunction realCoordToDPCoord(sp, calcCoord, calcSize) {\n    var cx = Config.WINDOW_WIDTH / 2;\n    var cy = Config.WINDOW_HEIGHT / 2;\n    var scaleMax = 20;\n    var normalDistance = 100;\n    var normalZ = normalDistance + sp._dpCameraZ;\n    var furthestDistance = normalDistance / scaleMax + normalDistance;\n    var furthestZ = furthestDistance + sp._dpCameraZ;\n    var dpZDistance = sp.dpZ - sp._dpCameraZ;\n    if (dpZDistance == normalDistance) {\n        if (calcCoord) {\n            var toDPX = sp.x;\n            var toDPY = sp.y;\n        }\n        if (calcSize) {\n            var toDPScaleX = sp.dpWidth == 0 ? 1 : sp.width / sp.dpWidth;\n            var toDPScaleY = sp.dpHeight == 0 ? 1 : sp.height / sp.dpHeight;\n        }\n    }\n    else if (dpZDistance > normalDistance) {\n        if (dpZDistance >= furthestDistance) {\n            return;\n        }\n        else {\n            var per = (dpZDistance - normalDistance) / (furthestDistance - normalDistance);\n            if (calcCoord) {\n                var toDPX = (sp.x - cx * per) / (1 - per);\n                var toDPY = (sp.y - cy * per) / (1 - per);\n            }\n            if (calcSize) {\n                var toDPScaleX = sp.width / ((0 - sp.dpWidth) * per + sp.dpWidth);\n                var toDPScaleY = sp.height / ((0 - sp.dpHeight) * per + sp.dpHeight);\n            }\n        }\n    }\n    else if (dpZDistance < normalDistance && dpZDistance >= 0) {\n        var near = (normalDistance - dpZDistance) / normalDistance;\n        var per = near * scaleMax;\n        var sPer = per + 1;\n        var toDPX = (sp.x + cx * per) / (1 + per);\n        var toDPY = (sp.y + cy * per) / (1 + per);\n        var toDPScaleX = sp.width / (sp.dpWidth * sPer);\n        var toDPScaleY = sp.height / (sp.dpHeight * sPer);\n    }\n    else {\n    }\n    if (calcCoord) {\n        sp.dpX = Math.floor(toDPX - sp._dpCameraX);\n        sp.dpY = Math.floor(toDPY - sp._dpCameraY);\n    }\n    if (calcSize) {\n        if (sp.useDPCoordScaleMode) {\n            sp.dpScaleX = toDPScaleX;\n            sp.dpScaleY = toDPScaleY;\n        }\n        else {\n            sp.dpWidth = Math.floor(sp.dpWidth * toDPScaleX);\n            sp.dpHeight = Math.floor(sp.dpHeight * toDPScaleY);\n            if (sp._dpTextureWidth != null) {\n                sp.scaleX = sp.width / sp._dpTextureWidth;\n                sp.scaleY = sp.height / sp._dpTextureHeight;\n                sp.width = sp._dpTextureWidth;\n                sp.height = sp._dpTextureHeight;\n            }\n        }\n    }\n    return { dpX: sp.dpX, dpy: sp.dpY, dpScaleX: toDPScaleX, dpScaleY: toDPScaleY, dpWidth: sp.dpWidth, dpHeight: sp.dpHeight };\n}\n",
    "IMAGE_LAYER_DP_COORD_TS": "//------------------------------------------------------------------------------------------------------\r\n// 图像层深度坐标系代码实现\r\n// 用于实现根据摄像机与图像层显示对象的坐标呈现出的实际显示效果\r\n// -- 编辑该代码后能够在编辑器中立刻呈现出效果出来，编辑器和游戏运行时都会运行该代码使之呈现效果一致\r\n// -- 如果要更改此代码请自行备份，以便能够恢复原始效果\r\n//------------------------------------------------------------------------------------------------------\r\n/**\r\n * 深度坐标系转为实际坐标系\r\n * @param sp 显示对象\r\n */\r\nfunction dpCoordToRealCoord(sp: GameSprite): void {\r\n    if (!sp.useDPCoord || !sp._dpDirty) return;\r\n    sp._dpDirty = false;\r\n    var cx = Config.WINDOW_WIDTH / 2;\r\n    var cy = Config.WINDOW_HEIGHT / 2;\r\n    // 镜头最大时显示对象放大倍数\r\n    var scaleMax = 20;\r\n    // 正常大小的Z距离\r\n    var normalDistance = 100;\r\n    var normalZ = normalDistance + sp._dpCameraZ;\r\n    var furthestDistance = normalDistance / scaleMax + normalDistance;\r\n    var furthestZ = furthestDistance + sp._dpCameraZ;\r\n    var dpX = sp.dpX + sp._dpCameraX;\r\n    var dpY = sp.dpY + sp._dpCameraY;\r\n    var dpZDistance = sp.dpZ - sp._dpCameraZ;\r\n    // 正常距离\r\n    if (dpZDistance == normalDistance) {\r\n        toX = dpX;\r\n        toY = dpY;\r\n        if (sp.useDPCoordScaleMode) {\r\n            var toScaleX = 1;\r\n            var toScaleY = 1;\r\n        }\r\n        else {\r\n            toW = sp.dpWidth;\r\n            toH = sp.dpHeight;\r\n        }\r\n        sp.dpOpacity = 1;\r\n    }\r\n    // 远距离：缩小，聚集屏幕中心点\r\n    else if (dpZDistance > normalDistance) {\r\n        // 超出最远距离的情况\r\n        if (dpZDistance >= furthestDistance) {\r\n            sp.dpOpacity = 0;\r\n            per = 1;\r\n            toX = cx;\r\n            toY = cy;\r\n            if (sp.useDPCoordScaleMode) {\r\n                toScaleX = 0.001;\r\n                toScaleY = 0.001;\r\n            }\r\n            else {\r\n                toW = 0;\r\n                toH = 0;\r\n            }\r\n        }\r\n        // 普通 => 最远 的情况\r\n        else {\r\n            sp.dpOpacity = 1;\r\n            var per = (dpZDistance - normalDistance) / (furthestDistance - normalDistance);\r\n            if (sp.useDPCoordScaleMode) {\r\n                var toX = (cx - dpX) * per + dpX;\r\n                var toY = (cy - dpY) * per + dpY;\r\n                toScaleX = 1 - per;\r\n                toScaleY = 1 - per;\r\n            }\r\n            else {\r\n                var toX = (cx - dpX) * per + dpX;\r\n                var toY = (cy - dpY) * per + dpY;\r\n                var toW = (0 - sp.dpWidth) * per + sp.dpWidth;\r\n                var toH = (0 - sp.dpHeight) * per + sp.dpHeight;\r\n            }\r\n        }\r\n    }\r\n    // 近距离：放大\r\n    else if (dpZDistance < normalDistance && dpZDistance >= 0) {\r\n        // 0-1 1表示最近\r\n        var near = (normalDistance - dpZDistance) / normalDistance;\r\n        var per = near * scaleMax;\r\n        var sPer = per + 1;\r\n        if (sp.useDPCoordScaleMode) {\r\n            var toX = (dpX - cx) * per + dpX;\r\n            var toY = (dpY - cy) * per + dpY;\r\n            toScaleX = sPer;\r\n            toScaleY = sPer;\r\n        }\r\n        else {\r\n            var toX = (dpX - cx) * per + dpX;\r\n            var toY = (dpY - cy) * per + dpY;\r\n            var toW = sp.dpWidth * sPer;\r\n            var toH = sp.dpHeight * sPer;\r\n        }\r\n        // 透明度效果\r\n        if (near > 0.5) {\r\n            sp.dpOpacity = (1 - (near - 0.5) * 2);\r\n        }\r\n        else {\r\n            sp.dpOpacity = 1;\r\n        }\r\n    }\r\n    // 超过镜头\r\n    else {\r\n        sp.dpOpacity = 0;\r\n    }\r\n    sp.pos(toX, toY);\r\n    // 使用useDPCoordScaleMode的情况：动画、立绘；界面\r\n    if (sp.useDPCoordScaleMode) {\r\n        sp.scaleX = toScaleX * sp.dpScaleX;\r\n        sp.scaleY = toScaleY * sp.dpScaleY;\r\n    }\r\n    // 图片\r\n    else {\r\n        if (sp.width == 0 || sp.height == 0) {\r\n            sp.scaleX = 1;\r\n            sp.scaleY = 1;\r\n        }\r\n        else {\r\n            sp.scaleX = Math.max(toW / sp.width * sp.dpScaleX, 0.001);\r\n            sp.scaleY = Math.max(toH / sp.height * sp.dpScaleY, 0.001);\r\n        }\r\n    }\r\n}\r\n/**\r\n * 实际坐标系转换为深度坐标系（比如操作工具操作了对象后，需要转换为深度坐标系）\r\n * @param calcCoord 是否计算坐标\r\n * @param calcSize 是否计算尺寸\r\n */\r\nfunction realCoordToDPCoord(sp: GameSprite, calcCoord: boolean, calcSize: boolean): { dpX: number, dpy: number, dpScaleX: number, dpScaleY: number, dpWidth: number, dpHeight: number } {\r\n    var cx = Config.WINDOW_WIDTH / 2;\r\n    var cy = Config.WINDOW_HEIGHT / 2;\r\n    var scaleMax = 20;\r\n    var normalDistance = 100;\r\n    var normalZ = normalDistance + sp._dpCameraZ;\r\n    var furthestDistance = normalDistance / scaleMax + normalDistance;\r\n    var furthestZ = furthestDistance + sp._dpCameraZ;\r\n    var dpZDistance = sp.dpZ - sp._dpCameraZ;\r\n    // 正常距离\r\n    if (dpZDistance == normalDistance) {\r\n        if (calcCoord) {\r\n            var toDPX = sp.x;\r\n            var toDPY = sp.y;\r\n        }\r\n        if (calcSize) {\r\n            var toDPScaleX = sp.dpWidth == 0 ? 1 : sp.width / sp.dpWidth;\r\n            var toDPScaleY = sp.dpHeight == 0 ? 1 : sp.height / sp.dpHeight;\r\n        }\r\n    }\r\n    // 远距离：缩小，聚集屏幕中心点\r\n    else if (dpZDistance > normalDistance) {\r\n        // 超出最远距离的情况\r\n        if (dpZDistance >= furthestDistance) {\r\n            return;\r\n        }\r\n        // 普通 => 最远 的情况\r\n        else {\r\n            var per = (dpZDistance - normalDistance) / (furthestDistance - normalDistance);\r\n            if (calcCoord) {\r\n                var toDPX = (sp.x - cx * per) / (1 - per);\r\n                var toDPY = (sp.y - cy * per) / (1 - per);\r\n            }\r\n            if (calcSize) {\r\n                var toDPScaleX = sp.width / ((0 - sp.dpWidth) * per + sp.dpWidth)\r\n                var toDPScaleY = sp.height / ((0 - sp.dpHeight) * per + sp.dpHeight);\r\n            }\r\n        }\r\n    }\r\n    // 近距离：放大\r\n    else if (dpZDistance < normalDistance && dpZDistance >= 0) {\r\n        // 0-1 1表示最近\r\n        var near = (normalDistance - dpZDistance) / normalDistance;\r\n        var per = near * scaleMax;\r\n        var sPer = per + 1;\r\n        var toDPX = (sp.x + cx * per) / (1 + per);\r\n        var toDPY = (sp.y + cy * per) / (1 + per);\r\n        var toDPScaleX = sp.width / (sp.dpWidth * sPer);\r\n        var toDPScaleY = sp.height / (sp.dpHeight * sPer);\r\n    }\r\n    // 超过镜头\r\n    else {\r\n\r\n    }\r\n    if (calcCoord) {\r\n        sp.dpX = Math.floor(toDPX - sp._dpCameraX);\r\n        sp.dpY = Math.floor(toDPY - sp._dpCameraY);\r\n    }\r\n    if (calcSize) {\r\n        if (sp.useDPCoordScaleMode) {\r\n            sp.dpScaleX = toDPScaleX;\r\n            sp.dpScaleY = toDPScaleY;\r\n        }\r\n        else {\r\n            sp.dpWidth = Math.floor(sp.dpWidth * toDPScaleX);\r\n            sp.dpHeight = Math.floor(sp.dpHeight * toDPScaleY);\r\n            // 如果存在贴图的话（图片对象）\r\n            if (sp._dpTextureWidth != null) {\r\n                sp.scaleX = sp.width / sp._dpTextureWidth;\r\n                sp.scaleY = sp.height / sp._dpTextureHeight;\r\n                sp.width = sp._dpTextureWidth;\r\n                sp.height = sp._dpTextureHeight;\r\n            }\r\n        }\r\n    }\r\n    return { dpX: sp.dpX, dpy: sp.dpY, dpScaleX: toDPScaleX, dpScaleY: toDPScaleY, dpWidth: sp.dpWidth, dpHeight: sp.dpHeight };\r\n}\r\n\r\n",
    "CREATED_GC_VERSION": 0.99095,
    "RELEASE_TEMPLATE_GC_VERSION": 0.985,
    "gameSID": "0.194023048763593-1716119679667",
    "gameProjectName": "orzi_language",
    "gameVersion": "1.0",
    "fragmentFileVersion": true,
    "GAME_MAG_FILTER": 9729,
    "templateVersionID": 450,
    "languages": "简体中文,繁体中文,English",
    "language": 0,
    "GC_CLOUD_PLATFORM": "https://gc.gamecreator.com.cn",
    "TEMPLETE_USER_UID": 20251,
    "AI_PAINTING_ID": 1,
    "gridAlignMode": 0,
    "z1": "1|/|3|3|7|2|5|7|4|9|:|:|7|6|2|3|8|3|7|.|2|8|1|3|:|7|:|8|6|6|6|3|3",
    "GAME_SERVER_HOST": "127.0.0.1",
    "GAME_SERVER_PORT": 26666,
    "WINDOW_WIDTH": 1600,
    "WINDOW_HEIGHT": 900,
    "STAGE_BACKGROUND_COLOR": "#000000",
    "SCENE_GRID_SIZE": 48,
    "TILE_LINEAR_MAG": false,
    "TILE_LINEAR_MIN": true,
    "ANIMATION_FPS": 20,
    "VIEW_USE_RESOLUTION": false,
    "DATA_GRIDS": [],
    "BORN": {
        "sceneID": 1,
        "so": {
            "modelID": 1,
            "index": 0,
            "name": "玩家对象",
            "x": 614,
            "y": 371,
            "z": 0,
            "materialData": [
                {
                    "materials": []
                }
            ],
            "avatarID": 0,
            "avatarOri": 2,
            "avatarAct": 1,
            "avatarFPS": 12,
            "avatarFrame": 1,
            "avatarAlpha": 1,
            "avatarHue": 0,
            "shadowEnable": false,
            "shadowWidth": 30,
            "shadowHeight": 15,
            "shadowAlpha": 0.5,
            "displayList": {},
            "moduleDisplayList": [],
            "layerLevel": 1,
            "autoPlayEnable": true,
            "scale": 1,
            "playerUID": 0,
            "hasCommand": [],
            "moduleIDs": []
        },
        "customAttribute": {},
        "bornModulesCustomAttribute": []
    },
    "WHEN_NO_SCENE": {
        "sceneID": 1,
        "x": 600,
        "y": 600,
        "z": 0
    },
    "DEFAULT_FONT": "Source_Han_Sans",
    "templateID": 182
}